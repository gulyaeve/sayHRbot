
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from logging import log, INFO

# from filters import AuthCheck
from loader import dp
from utils.utilities import get_bot_info


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_message = """
    <b>–ö–æ–º–∞–Ω–¥—ã —á–∞—Ç-–±–æ—Ç–∞:</b>\n
    <b>/say_thanks</b> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–ª–µ–≥–µ <b>–°–ø–∞—Å–∏–±–æ</b>\n
    <b>/start</b> - –ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º;\n
    <b>/auth</b> - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞;\n
    <b>/cancel</b> - –æ—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è;\n
    """
    # tricky_stiker = await db.select_stiker(emoji="tricky")
    # await message.answer_sticker(tricky_stiker['code'])
    await message.answer(help_message)


# @dp.message_handler(commands=['menu'])
# async def help_command(message: types.Message):
#     help_message = """
#     <b>/say_thanks</b> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–ª–µ–≥–µ <b>–°–ø–∞—Å–∏–±–æ</b>\n
#     """
#     # tricky_stiker = await db.select_stiker(emoji="tricky")
#     # await message.answer_sticker(tricky_stiker['code'])
#     await message.answer(help_message)


# @dp.message_handler(AuthCheck(), commands=['start'])
# async def cmd_start_user(message: types.Message):
#     """
#     Conversation's entry point
#     """
#     log(INFO, f"[{message.from_user.id=}] with auth –Ω–∞–∂–∞–ª START.")
#     me = await get_bot_info()
#     await message.reply(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç ¬´{me.full_name}¬ª! üòÅ")
#     await message.answer("–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É <b>/say_thanks</b>")


@dp.message_handler(commands=['start'])
async def cmd_start_user(message: types.Message):
    """
    Conversation's entry point
    """
    log(INFO, f"[{message.from_user.id=}] without auth –Ω–∞–∂–∞–ª START.")
    me = await get_bot_info()
    await message.reply(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç ¬´{me.full_name}¬ª! üòÅ")
    await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–π–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É: <b>/auth</b>")


# You can use state '*' if you need to handle all states
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
@dp.message_handler(state='*', commands=['cancel'])
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    log(INFO, f"[{message.from_user.id=}] –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ.")
    await state.finish()
    # sad_sticker = await db.select_stiker(emoji="sad")
    # await message.answer_sticker(sad_sticker['code'])
    await message.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())
