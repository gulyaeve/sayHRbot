
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Regexp
from logging import log, INFO

from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import managers_chats
from loader import dp, bot
from utils.utilities import make_keyboard_list


class Idea(StatesGroup):
    Text = State()
    Name = State()
    InputName = State()
    # TextAndAnon = State()
    # TextAndName = State()


@dp.message_handler(commands=['idea'])
async def idea_command(message: types.Message):
    await message.answer("üí°–ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –º–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ—Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã—Ö –ª—é–¥–µ–π. "
                         "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é, –∞ –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–æ–ø–ª–æ—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ "
                         "–∂–∏–∑–Ω—å –∏–ª–∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –∏—Ö —Ç–µ–º, –∫—Ç–æ —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –ª—É—á—à–µ –Ω–∞—Å.\n\n"
                         "ü•∑<i>–¢—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è (—Ç–æ–≥–¥–∞ —É –Ω–∞—Å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å "
                         "–æ–±—Å—É–¥–∏—Ç—å —Å —Ç–æ–±–æ–π –¥–µ—Ç–∞–ª–∏).</i>\n\n"
                         "‚úçÔ∏è<b>–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é:</b>")
    log(INFO, f"{message.from_user.id=} tap to idea")
    await Idea.Text.set()


@dp.message_handler(content_types=types.ContentType.TEXT, state=Idea.Text)
async def save_text_anon(message: types.Message, state: FSMContext):
    keyboard = make_keyboard_list([
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ",
        "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è"
    ])
    async with state.proxy() as data:
        data['idea'] = message.text
    await message.answer("–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—à—å—Å—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ?", reply_markup=keyboard)
    await Idea.Name.set()


@dp.message_handler(Text(equals="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ"), content_types=types.ContentType.TEXT, state=Idea.Name)
async def choose_name_anon(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –∂–∏–∑–Ω–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏!",
                         reply_markup=types.ReplyKeyboardRemove())
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç—É –∏–¥–µ—é",
                             callback_data=f'reply_for_idea={message.from_user.id}')]])
    for manager in managers_chats:
        await bot.send_message(manager,
                               f"#idea\n"
                               f"<i>–ê–Ω–æ–Ω–∏–º</i> –Ω–∞–ø–∏—Å–∞–ª –ò–î–ï–Æ:\n"
                               f"<code>{data['idea']}</code>",
                               reply_markup=inline_keyboard)
    await state.finish()


@dp.message_handler(Text(equals="–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è"), content_types=types.ContentType.TEXT, state=Idea.Name)
async def choose_name(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –§–ò–û:", reply_markup=types.ReplyKeyboardRemove())
    await Idea.InputName.set()


@dp.message_handler(content_types=types.ContentType.ANY, state=Idea.Name)
async def no_choose(message: types.Message):
    return await message.answer("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:")


@dp.message_handler(content_types=types.ContentType.TEXT, state=Idea.InputName)
async def save_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    # data = await state.get_data()
    await message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –∂–∏–∑–Ω–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏!",
                         reply_markup=types.ReplyKeyboardRemove())
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç—É –∏–¥–µ—é",
                             callback_data=f'reply_for_idea={message.from_user.id}')]])
    for manager in managers_chats:
        await bot.send_message(manager,
                               f"#idea\n"
                               f"<i>{data['name']}</i> –Ω–∞–ø–∏—Å–∞–ª –ò–î–ï–Æ:\n"
                               f"<code>{data['idea']}</code>",
                               reply_markup=inline_keyboard)
    await state.finish()


# @dp.message_handler(content_types=types.ContentType.TEXT, state=Idea.TextAndAnon)
# async def save_text_anon(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['idea'] = message.text
#     await message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –∂–∏–∑–Ω–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏!")
#     inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
#         InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç—É –∏–¥–µ—é",
#                              callback_data=f'reply_for_idea={message.from_user.id}')]])
#     for manager in managers_chats:
#         await bot.send_message(manager,
#                                f"#idea\n"
#                                f"<i>–ê–Ω–æ–Ω–∏–º</i> –Ω–∞–ø–∏—Å–∞–ª –ò–î–ï–Æ:\n"
#                                f"<code>{data['idea']}</code>",
#                                reply_markup=inline_keyboard)
#     await state.finish()


# @dp.message_handler(content_types=types.ContentType.TEXT, state=Idea.TextAndName)
# async def save_text_anon(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['idea'] = message.text
#     await message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –∂–∏–∑–Ω–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏!")
#     inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
#         InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç—É –∏–¥–µ—é",
#                              callback_data=f'reply_for_idea={message.from_user.id}')]])
#     for manager in managers_chats:
#         await bot.send_message(manager,
#                                f"#–∏–¥–µ—è\n"
#                                f"<i>{data['name']}</i> –Ω–∞–ø–∏—Å–∞–ª –ò–î–ï–Æ:\n"
#                                f"<code>{data['idea']}</code>",
#                                reply_markup=inline_keyboard)
#     await state.finish()


@dp.callback_query_handler(Regexp('reply_for_idea=([0-9]*)'))
async def answer_to_text(callback: types.CallbackQuery, state: FSMContext):
    reply_user_id = callback.data.split("=")[1]
    log(INFO, f"–í {callback.message.chat.id=} –≥–æ—Ç–æ–≤–∏—Ç—Å—è –æ—Ç–≤–µ—Ç –¥–ª—è {reply_user_id=}")
    async with state.proxy() as data:
        data["idea_user_id"] = reply_user_id
        data["message_id"] = callback.message.message_id
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
    await state.set_state("ANSWER_TO_IDEA")


@dp.message_handler(state="ANSWER_TO_IDEA", content_types=types.ContentType.ANY)
async def send_answer_to_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    log(INFO, f"–ò–∑ {message.chat.id=} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç {data['idea_user_id']=}")
    # await bot.copy_message(data['idea_user_id'], message.chat.id, message.message_id)
    await bot.send_message(data['idea_user_id'], f"–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã HR –Ω–∞ —Ç–≤–æ—é –∏–¥–µ—é:")
    await bot.copy_message(data['idea_user_id'], message.chat.id, message.message_id)
    await bot.edit_message_reply_markup(message.chat.id, data['message_id'], reply_markup=None)
    await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    log(INFO, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [{data["idea_user_id"]=}] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.message_id}')
    await state.finish()
